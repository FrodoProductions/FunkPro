Nr. 1

IA: 			foldl g z [] = foldr f z (reverse [])
foldl.1		⇔	z = foldr f z (reverse [])
rev.1		⇔	z = foldr f z []
foldr.1		⇔	z = z

IV: foldl g z xs = foldr f z (reverse xs)


Nr.2

h x (g y z) = g z (h x y)		…h.g.1

IA:			h x (foldl g y []) = foldl g (h x y) []
foldl.1		⇔	h x y = foldl g (h x y) []
foldl.1		⇔	h x y = h x y

IV:			h x (foldl g y xs) = foldl g (h x y) xs

IS:			h x (foldl g y (x:xs)) = foldl g (h x y) (x:xs)
foldl.2		⇔	h x (foldl g (g y x) xs) = foldl g (h x y) (x:xs)
IV		⇔	foldl g (h x (g y x)) xs = foldl g (h x y) (x:xs)
h.g.1		⇔	foldl g (g x (h x y)) xs = foldl g (h x y) (x:xs)
komm.		⇔	foldl g (g (h x y) x) xs = foldl g (h x y) (x:xs)
foldl.2		⇔	foldl g (g (h x y) x) xs = foldl g (g (h x y) x) xs


Nr. 4

IA: 			map f (tree2List Nil) = tree2List (mapTree f Nil)
treeLi.1		⇔	map f [] = tree2List(mapTree f Nil)
map.1		⇔	[] = tree2List(mapTree f Nil)
mapTr.1	⇔	[] = tree2List Nil
treeLi.1		⇔	[] = []

			map f (tree2List (Leaf x)) = tree2List (mapTree f (Leaf x))
treeLi.2	⇔	map f [x] = tree2List (mapTree f (Leaf x))
map.2		⇔	(f x) = tree2List (mapTree f (Leaf x))
mapTr.2	⇔	(f x) = tree2List (Leaf (f x))
treeLi.2	⇔	(f x) = (f x)


IVL: 			map f (tree2List lt) = tree2List (mapTree f lt)
IVR:			map f (tree2List rt) = tree2List (mapTree f rt)

IS: 			map f (tree2List (Node x t rt)) = tree2List (mapTree f (Node x lt rt))
mapTr.3	⇔	map f (tree2List (Node x t rt)) = tree2List (Node (f x) (mapTree f lt) (mapTree 			f rt))
treeLi.3	⇔	map f (tree2List (Node x t rt)) = tree2List (mapTree f rt) ++ [(f x)] ++ 					tree2List (mapTree f lt)
IVL, IVR	⇔	map f (tree2List (Node x t rt)) = map f (tree2List rt) ++ [(f x)] ++ map f 					(tree2List lt)
treeLi.3	⇔	map f (tree2List rt ++ [x] ++ tree2List) = map f (tree2List rt) ++ [(f x)] ++ map 			f (tree2List lt)
map		⇔	map f (tree2List rt) ++ [(f x)] ++ map f (tree2List lt)

Nr. 5

1) Diese Anweisung besitzt keinen Rumpf.
2) Die erste Klammer ist falsch gesetzt (richtig wäre z. B. (λ x.xzx)) und hinter der Anweisung steht eine weitere Einsetzungsanweisung (.) ohne dazugehörigen Lambda-Ausdruck.
3) Hier stehen zwei Einsetzungsanweisungen, obwohl es nur einen Lambda-Ausdruck gibt.


Nr. 6

1) a und y sind durch λa und λy gebunden.
2) Das z außerhalb der Klammern ist ungebunden, da jegliche Lambda-Ausdrücke in den Klammern stehen. Alle anderen sind gebunden (x in beiden Ausdrücken und z in der äußeren, dadurch auch in der inneren).
3) z ist frei, da kein λz vorkommt. Dies gilt auch für w. Das x im ersten äußeren Ausdruck ((λx.xz)x) ist ebenfalls frei, da weder in diesem noch in einem höheren Ausdruck ein λx vorkommt. Alle anderen Variablen sind gebunden.
4) In diesem Ausdruck sind nur das b und das x ungebunden, alle anderen sind entweder durch λczy oder λc gebunden.


Nr. 7

1) (λz y . z (λa b c . b(a b c)) y) (λs z . z) (λs z . s (z))
→β (z (λa b c . b(a b c)) y) [(λs z . z)\z, (λs z . s (z))\y]
→β (λs z . z) (λa b c . b(a b c)) (λs z . s (z))
→α (λs z . z) (λa b c . b(a b c)) (λx y . x (y))
→β z [(λx y . x (y))\z]
→β (λx y . x (y))


2) (λ z y . z y(λ a b . b)) (λ a b . a) (λ a b . b) z y
→β (λ z y . z y(λ a b . b)) (λ a b . a) b [y\b]
→β (λ z y . z y(λ a b . b)) (λ a b . a) y
→β z y(λ a b . b) [(λ a b . a)\z, b\y]
→β (λ a b . a) b (λ a b . b)
→β a [b\a]
→β b
